#pragma once
#include "type.h"

#define PI (3.1415926)

#define MAX(x,y) ((x) > (y) ? (x) : (y))
#define MIN(x,y) ((x) > (y) ? (y) : (x))

#define DEBUG 1

/* ----------------------------------------------------------------------*/
/**
 * @brief : 绘制一个矩形框, 用来debug
 *
 * @param : color:  颜色 #AARRGGBB
 */
/* ----------------------------------------------------------------------*/
void draw_rect(SDL_Rect* rect, int color);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 绘制一个圆(近似的)
 *
 * @param : x y :   圆心坐标
 * @param : radius: 半径
 * @param : color:  颜色 #AARRGGBB
 */
/* ----------------------------------------------------------------------*/
void draw_circle(int x, int y, int radius, int color);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 获取一个矩形的中心点坐标
 */
/* ----------------------------------------------------------------------*/
void get_center(SDL_Rect* r, SDL_Point* p);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 将一个矩形包含的texture旋转angle角度(顺时针)
 */
/* ----------------------------------------------------------------------*/
void spin_rect(SDL_Rect * r, SDL_Texture *t, int angle);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 计算根据两点坐标计算斜率并生成方向矢量dx dy
 *	    src -> dest
 *
 * @param : x1 y1 dest
 * @param : x2 y2 src
 */
/* ----------------------------------------------------------------------*/
void calc_slope(int x1, int y1, int x2, int y2, float* dx, float* dy);


/* ----------------------------------------------------------------------*/
/**
 * @brief : 两个矩形的碰撞检测函数
 *
 * @ret   : 1 = 碰撞 0 = 相离
 */
/* ----------------------------------------------------------------------*/
int collision(SDL_Rect* r1, SDL_Rect* r2);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 判断是不是飞出屏幕了
 */
/* ----------------------------------------------------------------------*/
int out_of_screen(SDL_Rect* r);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 绘制任意texture
 *
 * @param : texture源
 * @param : x y : 坐标
 */
/* ----------------------------------------------------------------------*/
void blit(SDL_Texture* texture, int x, int y);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 绘制矩形范围包含的texture
 *
 * @param : texture源
 * @param : src: 矩形选区
 * @param : x y : 坐标
 */
/* ----------------------------------------------------------------------*/
void blitRect(SDL_Texture* texture, SDL_Rect* src, int x, int y);

/* ----------------------------------------------------------------------*/
/**
 * @brief : X方向限制飞船位置
 */
/* ----------------------------------------------------------------------*/
void clip_ship_x(struct _ship* s);

/* ----------------------------------------------------------------------*/
/**
 * @brief : Y方向限制飞船位置
 */
/* ----------------------------------------------------------------------*/
void clip_ship_y(struct _ship* s);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 屏幕范围内限制飞船位置
 */
/* ----------------------------------------------------------------------*/
void clip_ship(struct _ship* s);

/* 载入贴图 */
SDL_Texture* loadTexture(char* filename);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 计算圆上一点的坐标
 *
 * @param : enter:  圆心坐标
 * @param : r:	    圆的半径
 * @param : d:	    圆上一点和X轴夹角
 * @param : p:	    返回的点坐标
 */
/* ----------------------------------------------------------------------*/
void calculate_circle_point(SDL_Point enter, int r, int d, SDL_Point* p);

/* ----------------------------------------------------------------------*/
/**
 * @brief : 根据角度计算xy方向的分量大小
 *
 * @param : s:	    总体speed
 * @param : d:	    方向角
 * @param : dx dy:  返回的分量
 */
/* ----------------------------------------------------------------------*/
void calculate_circle_speed(int s, int d, float *dx, float *dy);

